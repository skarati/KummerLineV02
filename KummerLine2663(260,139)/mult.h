#ifndef MULT_H_
#define MULT_H_

#define ADD(C,A,B) {C = A+B;}
#define SUB(C,A,B) {C = A-B;}
#define MULT(C,A,B) {C = A*B;}
#define SHIFTL(C,A,B) {C = A << (B);}
#define SHIFTR(C,A,B) {C = A >> (B);}
#define AND(C,A,B) {C = A & B;}

u64 MULT2S0,MULT2T0,MULT2U0; 
u64 MULT3S1,MULT3T1,MULT3U1,MULT3U2;
u64 MULT5S1,MULT5S2,MULT5T1,MULT5T2,MULT5U0,MULT5U1,MULT5U2,MULT5U3,MULT5U4;
u64 MULT10S0,MULT10S1,MULT10S2,MULT10S3,MULT10S4,MULT10T0,MULT10T1,MULT10T2,MULT10T3,MULT10T4,MULT10U0,MULT10U1,MULT10U2,MULT10U3,
	MULT10U4,MULT10U5,MULT10U6,MULT10U7,MULT10U8;
u64 SQ4S0,SQ4T0,SQ4U0,SQ4U1,SQ4U2;
u64 SQ5U0,SQ5U1,SQ5U2,SQ5U3,SQ5U4;
u64 SQ10U0,SQ10U1,SQ10U2,SQ10U3,SQ10U4,SQ10U5,SQ10U6,SQ10U7,SQ10U8;

#define MULT2(C0,C1,C2,F0,F1,G0,G1){ \
	MULT(C0,F0,G0); MULT(MULT2S0,F0,G1); MULT(C2,F1,G1); MULT(MULT2T0,F1,G0); \
	ADD(C1,MULT2S0,MULT2T0); \
}

#define ModifiedMULT2(C1,C2,F0,F1,G0,G1,C0){ \
	MULT(MULT2S0,F0,G1); MULT(C2,F1,G1); MULT(MULT2T0,F1,G0); \
	ADD(C1,MULT2S0,MULT2T0); \
}

#define MULT2Karatsuba(C0,C1,C2,F0,F1,G0,G1){ \
	MULT(C0,F0,G0); \
	MULT(C2,F1,G1); \
	ADD(MULT2S0,F0,F1); \
	ADD(MULT2T0,G0,G1); \
	MULT(MULT2U0,MULT2S0,MULT2T0); \
	SUB(MULT2U0,MULT2U0,C0); \
	SUB(MULT2U0,MULT2U0,C2); \
	C1=MULT2U0; \
}

#define ModifiedMULT2Karatsuba(C1,C2,F0,F1,G0,G1,C0){ /* C0=F0*G0 is provided as input */ \
	MULT(C2,F1,G1); \
	ADD(MULT2S0,F0,F1); \
	ADD(MULT2T0,G0,G1); \
	MULT(MULT2U0,MULT2S0,MULT2T0); \
	SUB(MULT2U0,MULT2U0,C0); \
	SUB(MULT2U0,MULT2U0,C2); \
	C1=MULT2U0; \
}

#define MULT3(C0,C1,C2,C3,C4,F0,F1,F2,G0,G1,G2){ \
	MULT(C0,F0,G0); \
	MULT2(C2,C3,C4,F1,F2,G1,G2); \
	ADD(MULT3S1,F0,F2); \
	ADD(MULT3T1,G0,G2); \
	ModifiedMULT2(MULT3U1,MULT3U2,F1,MULT3S1,G1,MULT3T1,C2); \
	SUB(MULT3U1,MULT3U1,C3); SUB(MULT3U2,MULT3U2,C4); SUB(MULT3U2,MULT3U2,C0); \
	C1 = MULT3U1; ADD(C2,C2,MULT3U2); \
}

#define ModifiedMULT3(C1,C2,C3,C4,F0,F1,F2,G0,G1,G2,C0){ /* C0=F0*G0 is provided as input */ \
	MULT2(C2,C3,C4,F1,F2,G1,G2); \
	ADD(MULT3S1,F0,F2); \
	ADD(MULT3T1,G0,G2); \
	ModifiedMULT2(MULT3U1,MULT3U2,F1,MULT3S1,G1,MULT3T1,C2); \
	SUB(MULT3U1,MULT3U1,C3); SUB(MULT3U2,MULT3U2,C4); SUB(MULT3U2,MULT3U2,C0); \
	C1 = MULT3U1; ADD(C2,C2,MULT3U2); \
}

#define MULT4(C0,C1,C2,C3,C4,C5,C6,F0,F1,F2,F3,G0,G1,G2,G3) { /* internal vars for MULT5 are used */ \
	MULT2(C0,C1,C2,F0,F1,G0,G1); \
	MULT2(C4,C5,C6,F2,F3,G2,G3);; \
	ADD(MULT5S1,F0,F2); ADD(MULT5S2,F1,F3); ADD(MULT5T1,G0,G2); ADD(MULT5T2,G1,G3); \
	MULT2(MULT5U1,MULT5U2,MULT5U3,MULT5S1,MULT5S2,MULT5T1,MULT5T2); \
	SUB(MULT5U1,MULT5U1,C0); SUB(MULT5U2,MULT5U2,C1); SUB(MULT5U3,MULT5U3,C2); \
	SUB(MULT5U1,MULT5U1,C4); SUB(MULT5U2,MULT5U2,C5); SUB(MULT5U3,MULT5U3,C6); \
	ADD(C2,C2,MULT5U1); C3=MULT5U2; ADD(C4,C4,MULT5U3); \
}

#define MULT5Hybrid(C0,C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4,G0,G1,G2,G3,G4) { \
	MULT2(C0,C1,C2,F0,F1,G0,G1); \
	MULT2(C4,C5,C6,F2,F3,G2,G3); \
	ADD(MULT5S1,F0,F2); ADD(MULT5S2,F1,F3); ADD(MULT5T1,G0,G2); ADD(MULT5T2,G1,G3); \
	MULT2(MULT5U0,MULT5U1,MULT5U2,MULT5S1,MULT5S2,MULT5T1,MULT5T2); \
	SUB(MULT5U0,MULT5U0,C0); SUB(MULT5U0,MULT5U0,C4); \
	SUB(MULT5U1,MULT5U1,C1); SUB(MULT5U1,MULT5U1,C5); \
	SUB(MULT5U2,MULT5U2,C2); SUB(MULT5U2,MULT5U2,C6); \
	ADD(C2,C2,MULT5U0); C3=MULT5U1; ADD(C4,C4,MULT5U2); \
	MULT(MULT5U0,F4,G0); MULT(MULT5U1,F4,G1); MULT(MULT5U2,F4,G2); MULT(MULT5U3,F4,G3); MULT(MULT5U4,F4,G4); \
	MULT(MULT5S1,G4,F0); MULT(MULT5S2,G4,F1); MULT(MULT5T1,G4,F2); MULT(MULT5T2,G4,F3); \
	ADD(MULT5U0,MULT5U0,MULT5S1); ADD(MULT5U1,MULT5U1,MULT5S2); ADD(MULT5U2,MULT5U2,MULT5T1); ADD(MULT5U3,MULT5U3,MULT5T2); \
	ADD(C4,C4,MULT5U0); ADD(C5,C5,MULT5U1); ADD(C6,C6,MULT5U2); \
	C7=MULT5U3; C8=MULT5U4; \
}

#define ModifiedMULT5Hybrid(C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4,G0,G1,G2,G3,G4,C0) { \
	ModifiedMULT2(C1,C2,F0,F1,G0,G1,C0); \
	MULT2(C4,C5,C6,F2,F3,G2,G3); \
	ADD(MULT5S1,F0,F2); ADD(MULT5S2,F1,F3); ADD(MULT5T1,G0,G2); ADD(MULT5T2,G1,G3); \
	MULT2(MULT5U0,MULT5U1,MULT5U2,MULT5S1,MULT5S2,MULT5T1,MULT5T2); \
	SUB(MULT5U0,MULT5U0,C0); SUB(MULT5U0,MULT5U0,C4); \
	SUB(MULT5U1,MULT5U1,C1); SUB(MULT5U1,MULT5U1,C5); \
	SUB(MULT5U2,MULT5U2,C2); SUB(MULT5U2,MULT5U2,C6); \
	ADD(C2,C2,MULT5U0); C3=MULT5U1; ADD(C4,C4,MULT5U2); \
	MULT(MULT5U0,F4,G0); MULT(MULT5U1,F4,G1); MULT(MULT5U2,F4,G2); MULT(MULT5U3,F4,G3); MULT(MULT5U4,F4,G4); \
	MULT(MULT5S1,G4,F0); MULT(MULT5S2,G4,F1); MULT(MULT5T1,G4,F2); MULT(MULT5T2,G4,F3); \
	ADD(MULT5U0,MULT5U0,MULT5S1); ADD(MULT5U1,MULT5U1,MULT5S2); ADD(MULT5U2,MULT5U2,MULT5T1); ADD(MULT5U3,MULT5U3,MULT5T2); \
	ADD(C4,C4,MULT5U0); ADD(C5,C5,MULT5U1); ADD(C6,C6,MULT5U2); \
	C7=MULT5U3; C8=MULT5U4; \
}

#define MULT5(C0,C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4,G0,G1,G2,G3,G4) { \
	MULT2(C0,C1,C2,F0,F1,G0,G1) \
	MULT3(C4,C5,C6,C7,C8,F2,F3,F4,G2,G3,G4); \
	ADD(MULT5S1,F0,F3); ADD(MULT5S2,F1,F4); ADD(MULT5T1,G0,G3); ADD(MULT5T2,G1,G4); \
	ModifiedMULT3(MULT5U1,MULT5U2,MULT5U3,MULT5U4,F2,MULT5S1,MULT5S2,G2,MULT5T1,MULT5T2,C4); \
	SUB(MULT5U1,MULT5U1,C5); SUB(MULT5U2,MULT5U2,C6); SUB(MULT5U3,MULT5U3,C7); SUB(MULT5U4,MULT5U4,C8); \
	SUB(MULT5U2,MULT5U2,C0); SUB(MULT5U3,MULT5U3,C1); SUB(MULT5U4,MULT5U4,C2); \
	ADD(C2,C2,MULT5U1); C3 = MULT5U2; ADD(C4,C4,MULT5U3); ADD(C5,C5,MULT5U4); \
}

#define ModifiedMULT5(C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4,G0,G1,G2,G3,G4,C0) { \
	ModifiedMULT2(C1,C2,F0,F1,G0,G1,C0) \
	MULT3(C4,C5,C6,C7,C8,F2,F3,F4,G2,G3,G4); \
	ADD(MULT5S1,F0,F3); ADD(MULT5S2,F1,F4); ADD(MULT5T1,G0,G3); ADD(MULT5T2,G1,G4); \
	ModifiedMULT3(MULT5U1,MULT5U2,MULT5U3,MULT5U4,F2,MULT5S1,MULT5S2,G2,MULT5T1,MULT5T2,C4); \
	SUB(MULT5U1,MULT5U1,C5); SUB(MULT5U2,MULT5U2,C6); SUB(MULT5U3,MULT5U3,C7); SUB(MULT5U4,MULT5U4,C8); \
	SUB(MULT5U2,MULT5U2,C0); SUB(MULT5U3,MULT5U3,C1); SUB(MULT5U4,MULT5U4,C2); \
	ADD(C2,C2,MULT5U1); C3 = MULT5U2; ADD(C4,C4,MULT5U3); ADD(C5,C5,MULT5U4); \
}

#define MULT10(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17,C18, \
	       F0,F1,F2,F3,F4,F5,F6,F7,F8,F9, \
	       G0,G1,G2,G3,G4,G5,G6,G7,G8,G9) { \
	MULT5(C0,C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4,G0,G1,G2,G3,G4); \
	MULT5(C10,C11,C12,C13,C14,C15,C16,C17,C18,F5,F6,F7,F8,F9,G5,G6,G7,G8,G9); \
	ADD(MULT10S0,F0,F5); ADD(MULT10S1,F1,F6); ADD(MULT10S2,F2,F7); ADD(MULT10S3,F3,F8); ADD(MULT10S4,F4,F9); \
	ADD(MULT10T0,G0,G5); ADD(MULT10T1,G1,G6); ADD(MULT10T2,G2,G7); ADD(MULT10T3,G3,G8); ADD(MULT10T4,G4,G9); \
	MULT5(MULT10U0,MULT10U1,MULT10U2,MULT10U3,MULT10U4,MULT10U5,MULT10U6,MULT10U7,MULT10U8, \
	      MULT10S0,MULT10S1,MULT10S2,MULT10S3,MULT10S4,MULT10T0,MULT10T1,MULT10T2,MULT10T3,MULT10T4); \
	SUB(MULT10U0,MULT10U0,C0); SUB(MULT10U1,MULT10U1,C1); SUB(MULT10U2,MULT10U2,C2); \
	SUB(MULT10U3,MULT10U3,C3); SUB(MULT10U4,MULT10U4,C4); SUB(MULT10U5,MULT10U5,C5); \
	SUB(MULT10U6,MULT10U6,C6); SUB(MULT10U7,MULT10U7,C7); SUB(MULT10U8,MULT10U8,C8); \
	SUB(MULT10U0,MULT10U0,C10); SUB(MULT10U1,MULT10U1,C11); SUB(MULT10U2,MULT10U2,C12); \
	SUB(MULT10U3,MULT10U3,C13); SUB(MULT10U4,MULT10U4,C14); SUB(MULT10U5,MULT10U5,C15); \
	SUB(MULT10U6,MULT10U6,C16); SUB(MULT10U7,MULT10U7,C17); SUB(MULT10U8,MULT10U8,C18); \
	ADD(C5,C5,MULT10U0); ADD(C6,C6,MULT10U1); ADD(C7,C7,MULT10U2); ADD(C8,C8,MULT10U3); \
	C9=MULT10U4;  \
	ADD(C10,C10,MULT10U5); ADD(C11,C11,MULT10U6); ADD(C12,C12,MULT10U7); ADD(C13,C13,MULT10U8); \
}

#define SQ4(C0,C1,C2,C3,C4,C5,C6,F0,F1,F2,F3){ \
\
	MULT(C0,F0,F0); MULT(C2,F1,F1); MULT(C1,F0,F1); \
	MULT(C4,F2,F2); MULT(C6,F3,F3); MULT(C5,F2,F3); \
	MULT(SQ4U0,F0,F2); MULT(SQ4U2,F1,F3); MULT(SQ4U1,F0,F3); MULT(SQ4S0,F1,F2); \
\
	ADD(SQ4U1,SQ4U1,SQ4S0); \
\
	SHIFTL(C1,C1,1); SHIFTL(C5,C5,1); SHIFTL(SQ4U0,SQ4U0,1); SHIFTL(SQ4U1,SQ4U1,1); SHIFTL(SQ4U2,SQ4U2,1); \
\
	ADD(C2,C2,SQ4U0); C3=SQ4U1; ADD(C4,C4,SQ4U2); \
}

#define SQ4Karatsuba(C0,C1,C2,C3,C4,C5,C6,F0,F1,F2,F3){ \
\
	ADD(SQ4S0,F0,F1); ADD(SQ4T0,F2,F3); \
\
	MULT(C0,F0,F0); MULT(C2,F1,F1); MULT(C1,F0,F1); \
	MULT(C4,F2,F2); MULT(C6,F3,F3); MULT(C5,F2,F3); \
	MULT(SQ4U0,F0,F2); MULT(SQ4U2,F1,F3); MULT(SQ4U1,SQ4S0,SQ4T0); \
\
	SUB(SQ4U1,SQ4U1,SQ4U0); SUB(SQ4U1,SQ4U1,SQ4U2); \
\
	SHIFTL(C1,C1,1); SHIFTL(C5,C5,1); SHIFTL(SQ4U0,SQ4U0,1); SHIFTL(SQ4U1,SQ4U1,1); SHIFTL(SQ4U2,SQ4U2,1); \
\
	ADD(C2,C2,SQ4U0); C3=SQ4U1; ADD(C4,C4,SQ4U2); \
}

#define SQ5(C0,C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4) { \
	SQ4(C0,C1,C2,C3,C4,C5,C6,F0,F1,F2,F3); \
	MULT(SQ5U0,F4,F0); MULT(SQ5U1,F4,F1); MULT(SQ5U2,F4,F2); MULT(SQ5U3,F4,F3); MULT(SQ5U4,F4,F4); \
	SHIFTL(SQ5U0,SQ5U0,1); SHIFTL(SQ5U1,SQ5U1,1); SHIFTL(SQ5U2,SQ5U2,1); SHIFTL(SQ5U3,SQ5U3,1); \
	ADD(C4,C4,SQ5U0); ADD(C5,C5,SQ5U1); ADD(C6,C6,SQ5U2); \
	C7 = SQ5U3; C8 = SQ5U4; \
}

#define SQ10(C0,C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17,C18,F0,F1,F2,F3,F4,F5,F6,F7,F8,F9) { \
	SQ5(C0,C1,C2,C3,C4,C5,C6,C7,C8,F0,F1,F2,F3,F4); \
	SQ5(C10,C11,C12,C13,C14,C15,C16,C17,C18,F5,F6,F7,F8,F9); \
	MULT5(SQ10U0,SQ10U1,SQ10U2,SQ10U3,SQ10U4,SQ10U5,SQ10U6,SQ10U7,SQ10U8,F0,F1,F2,F3,F4,F5,F6,F7,F8,F9); \
	SHIFTL(SQ10U0,SQ10U0,1); SHIFTL(SQ10U1,SQ10U1,1); SHIFTL(SQ10U2,SQ10U2,1); SHIFTL(SQ10U3,SQ10U3,1); SHIFTL(SQ10U4,SQ10U4,1); \
	SHIFTL(SQ10U5,SQ10U5,1); SHIFTL(SQ10U6,SQ10U6,1); SHIFTL(SQ10U7,SQ10U7,1); SHIFTL(SQ10U8,SQ10U8,1); \
	ADD(C5,C5,SQ10U0); ADD(C6,C6,SQ10U1); ADD(C7,C7,SQ10U2); ADD(C8,C8,SQ10U3); C9 = SQ10U4; \
	ADD(C10,C10,SQ10U5); ADD(C11,C11,SQ10U6); ADD(C12,C12,SQ10U7); ADD(C13,C13,SQ10U8); \
}

#define REDUCE2663(RES0,RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9,TEMP) { \
\
	REDUCEPARTA2663(RES0,RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9,TEMP); \
	REDUCEPARTB2663(RES0,RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9); \
}

#define REDUCEPARTA2663(RES0,RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9,TEMP) { /* 48 = 16*3 */ \
\
	MULT(TEMP[10],TEMP[10],48ULL); MULT(TEMP[11],TEMP[11],48ULL); MULT(TEMP[12],TEMP[12],48ULL); MULT(TEMP[13],TEMP[13],48ULL); \
	MULT(TEMP[14],TEMP[14],48ULL); MULT(TEMP[15],TEMP[15],48ULL); MULT(TEMP[16],TEMP[16],48ULL); MULT(TEMP[17],TEMP[17],48ULL); \
	MULT(TEMP[18],TEMP[18],48ULL); \
\
	ADD(RES0,TEMP[0],TEMP[10]); ADD(RES1,TEMP[1],TEMP[11]); ADD(RES2,TEMP[2],TEMP[12]); ADD(RES3,TEMP[3],TEMP[13]); \
	ADD(RES4,TEMP[4],TEMP[14]); ADD(RES5,TEMP[5],TEMP[15]); ADD(RES6,TEMP[6],TEMP[16]); ADD(RES7,TEMP[7],TEMP[17]); \
	ADD(RES8,TEMP[8],TEMP[18]); RES9=TEMP[9];\
}


#define REDUCEPARTB2663(RES0,RES1,RES2,RES3,RES4,RES5,RES6,RES7,RES8,RES9) { /* 48 = 38*19*/ \
\
	SHIFTR(MULT10S1,RES0,27); AND(RES0,RES0,mask27); ADD(RES1,RES1,MULT10S1); \
	SHIFTR(MULT10S1,RES1,27); AND(RES1,RES1,mask27); ADD(RES2,RES2,MULT10S1); \
	SHIFTR(MULT10S1,RES2,27); AND(RES2,RES2,mask27); ADD(RES3,RES3,MULT10S1); \
	SHIFTR(MULT10S1,RES3,27); AND(RES3,RES3,mask27); ADD(RES4,RES4,MULT10S1); \
	SHIFTR(MULT10S1,RES4,27); AND(RES4,RES4,mask27); ADD(RES5,RES5,MULT10S1); \
	SHIFTR(MULT10S1,RES5,27); AND(RES5,RES5,mask27); ADD(RES6,RES6,MULT10S1); \
	SHIFTR(MULT10S1,RES6,27); AND(RES6,RES6,mask27); ADD(RES7,RES7,MULT10S1); \
	SHIFTR(MULT10S1,RES7,27); AND(RES7,RES7,mask27); ADD(RES8,RES8,MULT10S1); \
	SHIFTR(MULT10S1,RES8,27); AND(RES8,RES8,mask27); ADD(RES9,RES9,MULT10S1); \
	SHIFTR(MULT10S1,RES9,23); AND(RES9,RES9,mask23); \
	MULT(MULT10S1,MULT10S1,3ULL); ADD(RES0,RES0,MULT10S1); \
	SHIFTR(MULT10S1,RES0,27); AND(RES0,RES0,mask27); ADD(RES1,RES1,MULT10S1); \
}

#endif
